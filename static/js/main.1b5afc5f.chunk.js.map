{"version":3,"sources":["components/Key.js","components/Movie.js","routes/HomePage/HomePage.js","routes/DetailPage/DetailPage.js","components/Navigation.js","App.js","index.js"],"names":["module","exports","ID_KEY","SECRET_KEY","Movie","poster","year","title","subtitle","director","actor","rate","to","pathname","state","className","src","alt","HomePage","isLoading","isSearchMovie","searchMovie","movieList","getMovies","a","axios","get","params","query","display","headers","items","data","console","log","Object","keys","length","setState","handleSubmitEvent","e","preventDefault","handleKeyEvent","keyCode","target","value","componentDidMount","span","letter","byline","document","getElementById","bylineArr","innerHTML","split","i","createElement","createTextNode","appendChild","render","filteredMovieList","filter","item","image","includes","map","re","RegExp","filteredTitle","replace","filteredSubTitle","filteredDirector","replaceAll","filteredActor","id","onSubmit","type","onKeyUp","placeholder","autoComplete","movie","index","pubDate","userRating","React","Component","Detail","location","props","this","history","undefined","push","Navigation","App","exact","path","component","DetailPage","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.1b5afc5f.chunk.js","sourcesContent":["const ID_KEY = \"lE98qEb5FF_JTXkWXxgr\";\r\nconst SECRET_KEY = \"ItdOHkS_tf\";\r\n\r\nmodule.exports = {\r\n    ID_KEY,\r\n    SECRET_KEY\r\n};","// axios를 통해 가져온 movie list를 렌더링하는 js\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Movie.css\";\r\n\r\n// map에 있는 각각의 item은 key값이 필요하다\r\nfunction Movie({ poster, year, title, subtitle, director, actor, rate }) {\r\n    return (\r\n        // \"/detail\" URL이 호출될 경우, state를 보내준다\r\n        <Link to={{\r\n            pathname: \"/detail\",\r\n            state: { poster, year, title, subtitle, director, actor, rate }\r\n        }}>\r\n            <div className=\"movie__items\">\r\n                <img \r\n                    src={poster}\r\n                    alt={title}\r\n                    title={title}\r\n                />\r\n                <div className=\"items__data\">\r\n                    <h3 className=\"items__title\">{title}</h3>\r\n                    <h4 className=\"items__subtitle\">{subtitle}</h4>\r\n                    <h5 className=\"items__year\">{year}</h5>\r\n                    <h5 className=\"items__director\">{director}</h5>\r\n                    <h5 className=\"items__actor\">{actor}</h5>\r\n                    <p className=\"items__rate\">{rate} / 10.00</p>\r\n                </div>            \r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\n\r\n// 네이버 영화 검색 API로 가져온 데이터의 item\r\nMovie.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    year: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    subtitle: PropTypes.string.isRequired,\r\n    director: PropTypes.string.isRequired,\r\n    actor: PropTypes.string.isRequired,\r\n    rate: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Movie;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../../components/Movie\";\r\nimport { ID_KEY, SECRET_KEY } from \"../../components/Key\";\r\nimport \"./HomePage.css\";\r\n\r\n/*\r\n// 동적으로 데이터를 보내주기\r\nconst foodILike = [\r\n  {\r\n    id: 1,\r\n    name: \"Kimchi\",\r\n    image:\r\n      \"http://aeriskitchen.com/wp-content/uploads/2008/09/kimchi_bokkeumbap_02-.jpg\",\r\n    rating: 5.0\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Samgyeopsal\",\r\n    image:\r\n      \"https://3.bp.blogspot.com/-hKwIBxIVcQw/WfsewX3fhJI/AAAAAAAAALk/yHxnxFXcfx4ZKSfHS_RQNKjw3bAC03AnACLcBGAs/s400/DSC07624.jpg\",\r\n    rating: 4.9\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Bibimbap\",\r\n    image:\r\n      \"http://cdn-image.myrecipes.com/sites/default/files/styles/4_3_horizontal_-_1200x900/public/image/recipes/ck/12/03/bibimbop-ck-x.jpg?itok=RoXlp6Xb\",\r\n    rating: 4.8\r\n },\r\n  {\r\n    id: 4,\r\n    name: \"Doncasu\",\r\n    image:\r\n      \"https://s3-media3.fl.yelpcdn.com/bphoto/7F9eTTQ_yxaWIRytAu5feA/ls.jpg\",\r\n    rating: 5.5\r\n  },\r\n  {\r\n    id: 5,\r\n    name: \"Kimbap\",\r\n    image:\r\n      \"http://cdn2.koreanbapsang.com/wp-content/uploads/2012/05/DSC_1238r-e1454170512295.jpg\",\r\n    rating: 4.7\r\n  }\r\n];\r\n\r\nfunction Food({name, picture, rating}) { // props를 인자로 받으면, Object 안에 favorite이라는 변수가 있음. 왼쪽 같이 표현하는 것은 ES6 문법임.\r\n  return (\r\n    <div>\r\n      <h1>I love {name}</h1>\r\n      <h4>{rating}/5.0</h4>\r\n      <img src={picture} alt={name}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n// type checker\r\nFood.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  picture: PropTypes.string.isRequired,\r\n  rating: PropTypes.number.isRequired\r\n}\r\n\r\nfunction renderFood(food) {\r\n  return (\r\n    <Food\r\n      key={food.id}\r\n      name={food.name}\r\n      picture={food.image}\r\n      rating={food.rating}\r\n    />\r\n  )\r\n}\r\n\r\n// component -> component로 정보를 보내는 방법\r\n// Food component에 favorite이라는 이름의 property를 potato라는 value로 전달\r\n// 누군가가 Food component에 정보를 보내려고 하면, react는 밑에 보이는 속성들을 가져올 것임\r\n// 그 속성들은 Food function component의 argument로 들어가짐\r\n// jsx + props를 사용하여 재사용성을 높인다\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      {foodILike.map(renderFood)}\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\n/* \r\n  [ class component ]\r\n\r\n  - 상속해서 function 사용\r\n  - React는 자동으로 class component의 render method를 실행함\r\n  - class component를 사용하면 로컬 state와 life cycle method와 같은 부가적인 기능을 사용할 수 있다\r\n  - state는 object이며 동적으로 변한다\r\n\r\n  - 기본적으로 React에서 render function은 state의 상태가 변경된다고 다시 호출되지 않는다\r\n  - state의 변경을 원한다면 setState를 사용해야 한다\r\n  - setState를 사용하면 원하는 부분만 변경 가능하다 => 이게 바로 React의 SPA!!\r\n\r\n  - setState를 사용할 때, React에서 외부의 상태에 의존하지 않는 좋은 방법은 current를 사용하는 것이다\r\n  - current === this.state\r\n\r\n  - 위에서 언급한 React Component는 Life Cycle이 존재하는데, 앱을 개발하면서 렌더링 직전에 특정한 작업을 해야 하거나, 컴포넌트 업데이트 전후에 처리해야 할 작업이 있을 수 있다.\r\n  - 이때 Life Cycle 관련 함수들을 이용하면 이를 처리할 수 있다.\r\n\r\n  종류: Mount, Update, UnMount\r\n\r\n  [Mount] ==> DOM 객체가 생성되고 브라우저에 나타나는 것\r\n  - constructor: 컴포넌트 클래스 생성자 함수, state의 초기값을 지정할 때 사용\r\n  - getDerivedStateFromProps: props와 state 값을 동기화할 때 사용하는 함수\r\n  - render: 컴포넌트의 기능을 정의하는 함수\r\n  - componentDidMount: 컴포넌트를 생성하고 첫 렌더링이 끝났을 때 호출하는 함수\r\n\r\n  [Update] ==> props값 변경, state값 변경, 부모 컴포넌트가 리렌더링, this.forceUpdate로 강제로 리렌더링\r\n  - getDerivedStateFromProps\r\n  - shouldComponentUpdate: 컴포넌트를 리렌더링 할지 말지 결정하는 함수\r\n  - render: 새로운 값을 사용하여 View를 리렌더링\r\n  - getSnapshotBeforeUpdate: 변경된 요소에 대해 DOM 객체에 반영하기 직전에 호출되는 함수\r\n  - ComponentDidUpdate: 컴포넌트 업데이트 작업이 끝난 리렌더링 후에 호출되는 함수\r\n\r\n  [UnMount] ==> 컴포넌트가 DOM에서 제거되는 것\r\n  - componentWillUnmount: 컴포넌트가 제거되기 직전에 호출되는 함수\r\n*/\r\n\r\n/*\r\nclass App extends React.Component {\r\n  state = {\r\n    count: 0\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(\"constructor 호출 --- create class App\");\r\n  }\r\n\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    console.log(\"getDerivedStateFromProps 호출\");\r\n    return null\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    console.log(\"shouldComponentUpdate 호출 --- do you want to update?\")\r\n    return true\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"componentDidUpdate 호출 --- update is done\")\r\n  }\r\n\r\n  getSnapshotBeforeUpdate(prevProps, prevState) {\r\n    console.log(\"getSnapshotBeforeUpdate 호출\")\r\n    return null\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount 호출 --- first rendering is done\");\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    console.log(\"componentWillUnmount 호출 --- component is dead\")\r\n  }\r\n\r\n  handleIncrease = () => {\r\n    this.setState(current => ({ \r\n      count: current.count + 1 \r\n    }));\r\n  }\r\n\r\n  handleDecrease = () => {\r\n    this.setState(current => ({ \r\n      count: current.count - 1 \r\n    }));\r\n  }\r\n\r\n  render () {\r\n    console.log(\"render 호출 --- rendering now\");\r\n    return (\r\n      <div>\r\n        <h1>The number is {this.state.count}</h1>\r\n        <button onClick={this.handleIncrease}>Increase</button>\r\n        <button onClick={this.handleDecrease}>Decrease</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n*/\r\n\r\n/*\r\n  [axios]\r\n  - fetch 위에 작은 layer\r\n  - 브라우저, Node.js를 위한 Promise API를 활용하는 HTTP 비동기 통신 라이브러리\r\n  - 백엔드랑 프론트엔드와 통신을 쉽게하기 위해 Ajax와 더불어 사용\r\n*/\r\nclass HomePage extends React.Component {\r\n  state = {\r\n    isLoading: true,\r\n    isSearchMovie: false,\r\n    searchMovie: '',\r\n    movieList: []\r\n  }\r\n\r\n  // get 요청이 들어올 때까지 대기\r\n  // 네이버 영화 검색 OPEN API 사용해보기\r\n  getMovies = async () => {\r\n    try {\r\n      // ES6 문법\r\n      const {\r\n        data: { items }\r\n      } = await axios.get(\"/api/v1/search/movie.json\", {\r\n        params: {\r\n          query: this.state.searchMovie,\r\n          display: 100\r\n        },\r\n        headers: {\r\n          'X-Naver-Client-Id': ID_KEY,\r\n          'X-Naver-Client-Secret': SECRET_KEY\r\n        }\r\n      })\r\n      \r\n      console.log(items);\r\n      if (Object.keys(items).length !== 0) {\r\n        await this.setState({ isSearchMovie: false })\r\n      } else {\r\n        await this.setState({ isSearchMovie: true })\r\n      }\r\n      this.setState({ movieList: items, isLoading: false });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  // prevent <form> submit reloading\r\n  handleSubmitEvent = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  handleKeyEvent = async (e) => {\r\n    // Enter 키를 누를 경우만 submit되도록\r\n    if (e.keyCode === 13) {\r\n      await this.setState({ searchMovie: e.target.value });\r\n      this.getMovies();\r\n    }\r\n  }\r\n  \r\n  // 컴포넌트를 생성하고 첫 렌더링이 끝났을 때 호출하는 함수\r\n  // CSS style을 꾸미기 위한 자바스크립트를 넣어줌\r\n  componentDidMount = () => {\r\n    const byline = document.getElementById('byline');\r\n    let bylineText = byline.innerHTML;\r\n    let bylineArr = bylineText.split('');\r\n    let span;\r\n    let letter;\r\n\r\n    byline.innerHTML = '';\r\n\r\n    for (let i = 0; i < bylineArr.length; i++){ \r\n      span = document.createElement(\"span\");\r\n      letter = document.createTextNode(bylineArr[i]);\r\n      \r\n      if(bylineArr[i] === ' ') {\r\n        byline.appendChild(letter);\r\n      } else {\r\n        span.appendChild(letter);\r\n        byline.appendChild(span);\r\n      }\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    // ES6 문법\r\n    const { isLoading, isSearchMovie, searchMovie, movieList } = this.state;\r\n    \r\n    // 문자열 처리\r\n    let filteredMovieList = movieList.filter(item => item.image.includes(\"http\"));\r\n    filteredMovieList.map(item => {\r\n      let re = RegExp(/<b>|<\\/b>|&nbsp;|&lt;|&amp;|&quot;|&#035;|&#039;|&gt;/g);\r\n      let filteredTitle = item.title.replace(re, \"\");\r\n      let filteredSubTitle = item.subtitle.replace(re, \"\");\r\n      let filteredDirector = item.director.replaceAll(\"|\", \", \").replace(/,\\s*$/, \"\");\r\n      let filteredActor = item.actor.replaceAll(\"|\", \", \").replace(/,\\s*$/, \"\");\r\n\r\n      item.title = filteredTitle;\r\n      item.subtitle = filteredSubTitle;\r\n      item.director = filteredDirector;\r\n      item.actor = filteredActor;\r\n\r\n      return item;\r\n    })\r\n\r\n    return (\r\n      // javascript에서 사용하는 class와 html에서 사용하는 class 이름이 같기 때문에, 구분을 위해서 className을 사용한다\r\n      <div className=\"container\">\r\n        <div className=\"container__title\">\r\n          <h2 className=\"byline\" id=\"byline\">Movie Search Theather</h2>\r\n        </div>\r\n        <div className=\"container__search\">\r\n          { searchMovie === '' ?\r\n            <form onSubmit={this.handleSubmitEvent}>\r\n              <div className=\"movie__search\">\r\n              <input\r\n                  className=\"movie__input\"\r\n                  type=\"text\"\r\n                  onKeyUp={this.handleKeyEvent}\r\n                  placeholder=\"Search for the movie you want to see.\"\r\n                  autoComplete=\"off\"\r\n                />\r\n                <img className=\"search-icon\" src=\"http://www.endlessicons.com/wp-content/uploads/2012/12/search-icon.png\" alt=\"search-icon\" />\r\n              </div>\r\n            </form>\r\n            : isLoading ? (\r\n              <div className=\"movie__loader\">\r\n                  <span className=\"loader__text\">Loading...</span>\r\n              </div>\r\n            ) \r\n            : isSearchMovie ? (\r\n              <div>\r\n                <h3>결과가 없습니다</h3>\r\n              </div>\r\n            ) : (\r\n              <div className=\"movie__list\">\r\n                  { filteredMovieList.map((movie, index) => { // Movie 앱의 props \r\n                    return (\r\n                      <Movie\r\n                          key={index}\r\n                          poster={movie.image}\r\n                          year={movie.pubDate}\r\n                          title={movie.title}\r\n                          subtitle={movie.subtitle}\r\n                          director={movie.director}\r\n                          actor={movie.actor}\r\n                          rate={movie.userRating}                          \r\n                      />\r\n                    )\r\n                  })}\r\n              </div>\r\n            )\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomePage;","import React from \"react\";\r\n\r\nclass Detail extends React.Component {    \r\n    componentDidMount() {\r\n        const { location, history } = this.props;\r\n        if (location.state === undefined) {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    render = () => {\r\n        const { location } = this.props;\r\n        return <span>{location.state.title}</span>\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n/*\r\n    ** Navigation이란 보통 왼쪽이나 오른쪽 화면에 현재 페이지가 어떤 페이지인가를 설명해주는 것 **\r\n    \r\n    라우팅한 링크를 여러 번 클릭할 때마다 bundle.js, webpack.js 등외 여러가지 파일을 새로 다운받는 걸 확인할 수 있다. \r\n    최초 한 번만 모든 정보를 새로 고치면 효율적이지만 매번 모든 정보를 새로 고치는 건 매우 비효율적이다.\r\n\r\n    이를 해결하려면 a 태그 대신 React Router DOM에서 제공하는 Link 컴포넌트를 사용하여 일부 영역만 수정토록 하면 된다.\r\n    Link 컴포넌트를 사용하면 a 태그에 onClick 이벤트를 구현하여 앵커의 기본 동작(모든 콘텐츠 새로고침)을 방지한다.\r\n\r\n    Linke는 라우터 안에서만 사용 가능하며, Link가 렌더링되면 html에 자동으로 a 태그로 렌더링된다.\r\n*/\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <Link className=\"nav__link\" to=\"/\">Home</Link>\r\n            <Link className=\"nav__link\" to=\"/detail\">Detail</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport HomePage from \"./routes/HomePage/HomePage\"\r\nimport DetailPage from \"./routes/DetailPage/DetailPage\"\r\nimport Navigation from \"./components/Navigation\";\r\n\r\n/*\r\n  ** 라우팅(Routing)이란 경로(URL)에 따라 페이지의 이동을 설정하는 것. **\r\n\r\n  Route: 컴포넌트의 속성에 설정된 URL과 현재 경로가 일치하면 해당하는 컴포넌트, 함수를 렌더링한다.\r\n         또한, url을 기준으로 어떤 component를 불러올지 결정한다.\r\n         만약 exact 속성을 부여하면, 오직 정해진 path에 대해서만 라우터가 설정되며, 안그러면 동시에 렌더링 하게 된다.\r\n*/\r\n/*\r\n  Navigation: 각 페이지로 이동할 수 있는 \r\n*/\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navigation>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route path=\"/detail\" component={DetailPage} />\r\n        </Switch>\r\n      </Navigation>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n// root 태그에 App virtual Dom을 렌더링함\n// <App /> <-- Component라고 불림, HTML을 반환하는 함수\n// HTML과 Javascript간의 이러한 구조를 jsx라고 불림\n// React는 component로 동작함\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}